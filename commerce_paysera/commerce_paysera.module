<?php

require_once('vendor/webtopay/libwebtopay/WebToPay.php');

/**
 * Implements hook_menu().
 */
function commerce_paysera_menu() {
    $items = array();

    // Define an always accessible path to receive IPNs.
    $items['commerce_paysera/ipn'] = array(
        'page callback'   => 'commerce_paysera_process_ipn',
        'page arguments'  => array(),
        'access callback' => TRUE,
        'type'            => MENU_CALLBACK,
    );

    // Define an additional IPN path that is payment method / instance specific.
    $items['commerce_paysera/ipn/%commerce_payment_method_instance'] = array(
        'page callback'   => 'commerce_paysera_process_ipn',
        'page arguments'  => array(2),
        'access callback' => TRUE,
        'type'            => MENU_CALLBACK,
    );

    // When the payment is deferred we might not get back the callback from Paysera. So we can force the successful payment manually
    $items['commerce_paysera/force/success/order/%'] = array(
      'page callback'   => 'commerce_paysera_force_successful_payment',
      'page arguments'  => array(4),
      'access callback' => 'user_access',
      'access arguments' => array('administer access control'), // Only admins can do it
      'type'            => MENU_CALLBACK,
    );

    return $items;
}

/**
 * Processes an incoming IPN.
 *
 * @param $payment_method
 *   The payment method instance array that originally made the payment.
 * @return
 *   TRUE or FALSE indicating whether the IPN was successfully processed or not.
 */
function commerce_paysera_process_ipn($payment_method = NULL) {
    try {
        global $_domain;
        $subdomain = $_domain['subdomain']; // This is with the port if it's not :80

        $projectIdsPerSubdomain = explode("\n", $payment_method['settings']['projectId']);
        $generalProjectId = '';
        $projectId = '';
        foreach($projectIdsPerSubdomain as $projectIdWithSubdomain) {
            $exploaded = explode(':', $projectIdWithSubdomain);
            if(count($exploaded) == 1) {
                $generalProjectId = trim($exploaded[0]);
            } else {
                if(count($exploaded) == 2) {
                    if($exploaded[0] == $subdomain) {
                        $projectId = trim($exploaded[1]);
                        break;
                    }
                } else {
                    $potentialProjectId = trim(array_pop($exploaded));
                    $checkSubdomain = implode(':', $exploaded);
                    if($checkSubdomain == $subdomain) {
                        $projectId = $potentialProjectId;
                        break;
                    }
                }
            }
        }

        if(empty($projectId)) {
          $projectId = $generalProjectId;
        }

        $passwordsPerProject = explode("\n", $payment_method['settings']['projectPass']);
        $generalPassword = '';
        $password = '';
        foreach($passwordsPerProject as $projectIdWithPassword) {
          $exploaded = explode(':', $projectIdWithPassword);
          if(count($exploaded) == 1) {
            $generalPassword = trim($exploaded[0]);
          } else {
            if($exploaded[0] == $projectId) {
              $password = trim($exploaded[1]);
              break;
            }
          }
        }
        if(empty($password)) {
          $password = $generalPassword;
        }

        $data = WebToPay::checkResponse(
            $_REQUEST,
            array(
                'projectid'     => $projectId,
                'sign_password' => $password,
            )
        );
    } catch (Exception $e) {
        watchdog('commerce_paysera', 'Invalid IPN received and ignored: @msg', array('@msg' => $e->getMessage()), WATCHDOG_ALERT);
        return FALSE;
    }

    if (empty($data['orderid'])) {
        watchdog('commerce_paysera', 'Unknown order', array(), WATCHDOG_ALERT);
        return FALSE;
    }

    $orderData = commerce_order_load($data['orderid']);

    // Exit when we don't get a payment status we recognize.
    if (!in_array($data['status'], array(0, 1, 2, 3))) {
        watchdog('commerce_paysera', 'Unknown payment status code: @code', array('@code' => $data['status']), WATCHDOG_ALERT);
        commerce_payment_redirect_pane_previous_page($orderData);
        return FALSE;
    }

    $Order = entity_metadata_wrapper('commerce_order', $orderData);
    $orderAmount = intval(number_format($Order->commerce_order_total->amount->value(), 0, '', ''));
    if ($orderAmount != $data['amount']) {
        watchdog('commerce_paysera', 'Wrong amount. @amt != @amt2', array('@amt' => $orderAmount, '@amt2' => $data['amount']), WATCHDOG_ALERT);
        return FALSE;
    }

    $orderCurrency = $Order->commerce_order_total->currency_code->value();
    if ($orderCurrency != $data['currency']) {
        watchdog('commerce_paysera', 'Wrong currency. @curr != @curr2', array('@amt' => $orderCurrency, '@amt2' => $data['currency']), WATCHDOG_ALERT);
        return FALSE;
    }

    $payments = commerce_payment_transaction_load_multiple(array(), array('order_id' => $data['orderid']));
    // Assuming there's only one payment transaction done per order
    $transaction = !empty($payments) ? array_shift($payments) : NULL;
    $transactionExists = !is_null($transaction);

    if (!is_null($transaction)) {
        watchdog('commerce_paysera', 'Found existing transaction.', array(), WATCHDOG_DEBUG);
    } else {
        $transaction = commerce_payment_transaction_new('paysera_wps', $data['orderid']);
        $transaction->instance_id = $payment_method['instance_id'];
    }

    $transaction->remote_id = (isset($data['requestid']) ? $data['requestid'] : ''); // Not alwasy comes in
    $transaction->amount = $data['amount'];
    $transaction->currency_code = $data['currency'];
    $transaction->remote_status = $data['status'];
    $transaction->payload[REQUEST_TIME . '-request_data'] = $_REQUEST['data'];
    $transaction->data = $data;

    /**
     * Payment status:
     * 0 - payment has no been executed
     * 1 - payment successful
     * 2 - payment order accepted, but not yet executed
     * 3 - additional payment information
     */
    switch ($data['status']) {
        case 0:
            $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
            $transaction->message = t("The payment has not been executed");
            break;
        case 1:
            $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
            $transaction->message = t('Payment successful');
            break;
        case 2:
            $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
            $transaction->message = t('Payment accepted but not yet executed');
            break;
        case 3:
            if ($transactionExists) {
                // Keep the status of the previous transaction revision
            } else {
                // Assume pending, because it's neither success nor failure
                $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
            }
            $transaction->message = t('Additional information received');
            break;
    }

    // Append additional message comming from Paysera
    $transaction->message .= (isset($data['paytext']) ? ' ' . $data['paytext'] : '');


    commerce_payment_transaction_save($transaction);

    // Finish processing
    commerce_payment_redirect_pane_next_page($orderData);
    watchdog('commerce_paysera', 'IPN processed for order @order_number with transaction @txn_id.', array('@txn_id' => $transaction->transaction_id, '@order_number' => $orderData->order_number), WATCHDOG_INFO);

    exit('OK'); // Required by Paysera to digest the callback properly
}

function commerce_paysera_force_successful_payment($orderid) {
    $payments = commerce_payment_transaction_load_multiple(array(), array('order_id' => $orderid));
    // Assuming there's only one payment transaction done per order
    $transaction = !empty($payments) ? array_shift($payments) : NULL;

    if (!is_null($transaction)) {
        watchdog('commerce_paysera', 'Found existing transaction.', array(), WATCHDOG_DEBUG);
    } else {
        die("Transaction doesn't exist for order $orderid");
    }

    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->message = t('Forced successful payment');

    commerce_payment_transaction_save($transaction);

    die("Forced successful payment for order $orderid. If the order hasn't been paid before then the rules will trigger with the event 'commerce_payment_order_paid_in_full'");
}

/**
 * Returns an array of Paysera payment method icon img elements.
 *
 * @return
 *   The array of themed payment method icons keyed by language: lt, en
 */
function commerce_paysera_icons() {
    $icons = array();

    $icons['lt'] = theme(
        'image',
        array(
            'path'  => drupal_get_path('module', 'commerce_paysera') . '/images/mokejimai.png',
            'title' => 'Mokejimai.lt',
            'alt'   => 'Mokejimai.lt',
        )
    );

    $icons['en'] = theme(
        'image',
        array(
            'path'  => drupal_get_path('module', 'commerce_paysera') . '/images/paysera.png',
            'title' => 'Paysera.com',
            'alt'   => 'Paysera.com',
        )
    );

    $icons['ru'] = theme(
        'image',
        array(
            'path'  => drupal_get_path('module', 'commerce_paysera') . '/images/paysera.png',
            'title' => 'Paysera.com',
            'alt'   => 'Paysera.com',
        )
    );

    return $icons;
}
